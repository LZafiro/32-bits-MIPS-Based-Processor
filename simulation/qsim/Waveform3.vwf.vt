// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/15/2020 17:14:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ioSimu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ioSimu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:31] externalIn;
reg [0:31] fromCPU;
reg inctrl;
reg outctrl;
// wires                                               
wire [0:31] externalOut;
wire [0:31] forCPU;

// assign statements (if any)                          
ioSimu i1 (
// port map - connection between master ports and signals/registers   
	.externalIn(externalIn),
	.externalOut(externalOut),
	.forCPU(forCPU),
	.fromCPU(fromCPU),
	.inctrl(inctrl),
	.outctrl(outctrl)
);
initial 
begin 
#1000000 $finish;
end 

// inctrl
initial
begin
	inctrl = 1'b1;
	inctrl = #60000 1'b0;
end 

// outctrl
initial
begin
	outctrl = 1'b0;
	outctrl = #120000 1'b1;
	outctrl = #190000 1'b0;
end 
// fromCPU[ 31 ]
initial
begin
	fromCPU[31] = 1'b0;
end 
// fromCPU[ 30 ]
initial
begin
	fromCPU[30] = 1'b1;
end 
// fromCPU[ 29 ]
initial
begin
	fromCPU[29] = 1'b1;
end 
// fromCPU[ 28 ]
initial
begin
	fromCPU[28] = 1'b0;
end 
// fromCPU[ 27 ]
initial
begin
	fromCPU[27] = 1'b1;
end 
// fromCPU[ 26 ]
initial
begin
	fromCPU[26] = 1'b1;
end 
// fromCPU[ 25 ]
initial
begin
	fromCPU[25] = 1'b0;
end 
// fromCPU[ 24 ]
initial
begin
	fromCPU[24] = 1'b0;
end 
// fromCPU[ 23 ]
initial
begin
	fromCPU[23] = 1'b0;
end 
// fromCPU[ 22 ]
initial
begin
	fromCPU[22] = 1'b0;
end 
// fromCPU[ 21 ]
initial
begin
	fromCPU[21] = 1'b0;
end 
// fromCPU[ 20 ]
initial
begin
	fromCPU[20] = 1'b0;
end 
// fromCPU[ 19 ]
initial
begin
	fromCPU[19] = 1'b0;
end 
// fromCPU[ 18 ]
initial
begin
	fromCPU[18] = 1'b0;
end 
// fromCPU[ 17 ]
initial
begin
	fromCPU[17] = 1'b0;
end 
// fromCPU[ 16 ]
initial
begin
	fromCPU[16] = 1'b0;
end 
// fromCPU[ 15 ]
initial
begin
	fromCPU[15] = 1'b0;
end 
// fromCPU[ 14 ]
initial
begin
	fromCPU[14] = 1'b0;
end 
// fromCPU[ 13 ]
initial
begin
	fromCPU[13] = 1'b0;
end 
// fromCPU[ 12 ]
initial
begin
	fromCPU[12] = 1'b0;
end 
// fromCPU[ 11 ]
initial
begin
	fromCPU[11] = 1'b0;
end 
// fromCPU[ 10 ]
initial
begin
	fromCPU[10] = 1'b0;
end 
// fromCPU[ 9 ]
initial
begin
	fromCPU[9] = 1'b0;
end 
// fromCPU[ 8 ]
initial
begin
	fromCPU[8] = 1'b0;
end 
// fromCPU[ 7 ]
initial
begin
	fromCPU[7] = 1'b0;
end 
// fromCPU[ 6 ]
initial
begin
	fromCPU[6] = 1'b0;
end 
// fromCPU[ 5 ]
initial
begin
	fromCPU[5] = 1'b0;
end 
// fromCPU[ 4 ]
initial
begin
	fromCPU[4] = 1'b0;
end 
// fromCPU[ 3 ]
initial
begin
	fromCPU[3] = 1'b0;
end 
// fromCPU[ 2 ]
initial
begin
	fromCPU[2] = 1'b0;
end 
// fromCPU[ 1 ]
initial
begin
	fromCPU[1] = 1'b0;
end 
// fromCPU[ 0 ]
initial
begin
	fromCPU[0] = 1'b0;
end 
// externalIn[ 31 ]
initial
begin
	externalIn[31] = 1'b0;
end 
// externalIn[ 30 ]
initial
begin
	externalIn[30] = 1'b1;
end 
// externalIn[ 29 ]
initial
begin
	externalIn[29] = 1'b1;
end 
// externalIn[ 28 ]
initial
begin
	externalIn[28] = 1'b0;
end 
// externalIn[ 27 ]
initial
begin
	externalIn[27] = 1'b1;
end 
// externalIn[ 26 ]
initial
begin
	externalIn[26] = 1'b1;
end 
// externalIn[ 25 ]
initial
begin
	externalIn[25] = 1'b1;
end 
// externalIn[ 24 ]
initial
begin
	externalIn[24] = 1'b1;
end 
// externalIn[ 23 ]
initial
begin
	externalIn[23] = 1'b0;
end 
// externalIn[ 22 ]
initial
begin
	externalIn[22] = 1'b1;
end 
// externalIn[ 21 ]
initial
begin
	externalIn[21] = 1'b0;
end 
// externalIn[ 20 ]
initial
begin
	externalIn[20] = 1'b0;
end 
// externalIn[ 19 ]
initial
begin
	externalIn[19] = 1'b0;
end 
// externalIn[ 18 ]
initial
begin
	externalIn[18] = 1'b0;
end 
// externalIn[ 17 ]
initial
begin
	externalIn[17] = 1'b0;
end 
// externalIn[ 16 ]
initial
begin
	externalIn[16] = 1'b0;
end 
// externalIn[ 15 ]
initial
begin
	externalIn[15] = 1'b0;
end 
// externalIn[ 14 ]
initial
begin
	externalIn[14] = 1'b0;
end 
// externalIn[ 13 ]
initial
begin
	externalIn[13] = 1'b0;
end 
// externalIn[ 12 ]
initial
begin
	externalIn[12] = 1'b0;
end 
// externalIn[ 11 ]
initial
begin
	externalIn[11] = 1'b0;
end 
// externalIn[ 10 ]
initial
begin
	externalIn[10] = 1'b0;
end 
// externalIn[ 9 ]
initial
begin
	externalIn[9] = 1'b0;
end 
// externalIn[ 8 ]
initial
begin
	externalIn[8] = 1'b0;
end 
// externalIn[ 7 ]
initial
begin
	externalIn[7] = 1'b0;
end 
// externalIn[ 6 ]
initial
begin
	externalIn[6] = 1'b0;
end 
// externalIn[ 5 ]
initial
begin
	externalIn[5] = 1'b0;
end 
// externalIn[ 4 ]
initial
begin
	externalIn[4] = 1'b0;
end 
// externalIn[ 3 ]
initial
begin
	externalIn[3] = 1'b0;
end 
// externalIn[ 2 ]
initial
begin
	externalIn[2] = 1'b0;
end 
// externalIn[ 1 ]
initial
begin
	externalIn[1] = 1'b0;
end 
// externalIn[ 0 ]
initial
begin
	externalIn[0] = 1'b0;
end 
endmodule

