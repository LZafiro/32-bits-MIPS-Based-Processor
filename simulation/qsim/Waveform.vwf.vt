// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/17/2020 14:17:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mipsBasedSystem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mipsBasedSystem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [0:31] dataIn;
reg enter;
reg reset;
// wires                                               
wire [0:31] dataOut;

// assign statements (if any)                          
mipsBasedSystem i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dataIn(dataIn),
	.dataOut(dataOut),
	.enter(enter),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// enter
initial
begin
	enter = 1'b0;
	enter = #100000 1'b1;
	enter = #20000 1'b0;
end 
// dataIn[ 31 ]
initial
begin
	dataIn[31] = 1'b0;
end 
// dataIn[ 30 ]
initial
begin
	dataIn[30] = 1'b0;
end 
// dataIn[ 29 ]
initial
begin
	dataIn[29] = 1'b1;
end 
// dataIn[ 28 ]
initial
begin
	dataIn[28] = 1'b0;
end 
// dataIn[ 27 ]
initial
begin
	dataIn[27] = 1'b0;
end 
// dataIn[ 26 ]
initial
begin
	dataIn[26] = 1'b0;
end 
// dataIn[ 25 ]
initial
begin
	dataIn[25] = 1'b0;
end 
// dataIn[ 24 ]
initial
begin
	dataIn[24] = 1'b0;
end 
// dataIn[ 23 ]
initial
begin
	dataIn[23] = 1'b0;
end 
// dataIn[ 22 ]
initial
begin
	dataIn[22] = 1'b0;
end 
// dataIn[ 21 ]
initial
begin
	dataIn[21] = 1'b0;
end 
// dataIn[ 20 ]
initial
begin
	dataIn[20] = 1'b0;
end 
// dataIn[ 19 ]
initial
begin
	dataIn[19] = 1'b0;
end 
// dataIn[ 18 ]
initial
begin
	dataIn[18] = 1'b0;
end 
// dataIn[ 17 ]
initial
begin
	dataIn[17] = 1'b0;
end 
// dataIn[ 16 ]
initial
begin
	dataIn[16] = 1'b0;
end 
// dataIn[ 15 ]
initial
begin
	dataIn[15] = 1'b0;
end 
// dataIn[ 14 ]
initial
begin
	dataIn[14] = 1'b0;
end 
// dataIn[ 13 ]
initial
begin
	dataIn[13] = 1'b0;
end 
// dataIn[ 12 ]
initial
begin
	dataIn[12] = 1'b0;
end 
// dataIn[ 11 ]
initial
begin
	dataIn[11] = 1'b0;
end 
// dataIn[ 10 ]
initial
begin
	dataIn[10] = 1'b0;
end 
// dataIn[ 9 ]
initial
begin
	dataIn[9] = 1'b0;
end 
// dataIn[ 8 ]
initial
begin
	dataIn[8] = 1'b0;
end 
// dataIn[ 7 ]
initial
begin
	dataIn[7] = 1'b0;
end 
// dataIn[ 6 ]
initial
begin
	dataIn[6] = 1'b0;
end 
// dataIn[ 5 ]
initial
begin
	dataIn[5] = 1'b0;
end 
// dataIn[ 4 ]
initial
begin
	dataIn[4] = 1'b0;
end 
// dataIn[ 3 ]
initial
begin
	dataIn[3] = 1'b0;
end 
// dataIn[ 2 ]
initial
begin
	dataIn[2] = 1'b0;
end 
// dataIn[ 1 ]
initial
begin
	dataIn[1] = 1'b0;
end 
// dataIn[ 0 ]
initial
begin
	dataIn[0] = 1'b0;
end 
endmodule

